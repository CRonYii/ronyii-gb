import { MemoryController } from "./Memory";

const MemorySegmentDefinitions: MemoryController[] = [
    /** [0000-3FFF] Cartridge ROM, bank 0: 
     *  The first 16,384 bytes of the cartridge program
     *  are always available at this point in the memory map. */
    {
        start: 0x0000,
        end: 0x3fff,
        set: () => { },
        defaultValues: new Uint8Array([ // GB BIOS
         //  X0    X1    X2    X3    X4    X5    X6    X7    X8    X9    XA    XB    XC    XD    XE    XF
            0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E, // 0X
            0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0, // 1X
            0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B, // 2X
            0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9, // 3X
            0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20, // 4X
            0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04, // 5X
            0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2, // 6X
            0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06, // 7X
            0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20, // 8X
            0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17, // 9X
            0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, // AX
            0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, // BX
            0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, // CX
            0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C, // DX
            0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20, // EX
            0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50, // FX
        ])
    },
    /** [4000-7FFF] Cartridge ROM, other banks: 
     *  Any subsequent 16k "banks" of the cartridge program
     *  can be made available to the CPU here, one by one; a chip on the cartridge is generally
     *  used to switch between banks, and make a particular area accessible.
     *  The smallest programs are 32k, which means that no bank-selection chip is required. */
    {
        start: 0x4000,
        end: 0x7fff,
        set: () => { }
    },
    /** [8000-9FFF] Graphics RAM: 
     *  Data required for the backgrounds and sprites used by
     *  the graphics subsystem is held here, and can be changed by the cartridge program.
     *  This region will be examined in further detail in part 3 of this series. */
    {
        start: 0x8000,
        end: 0x9fff,
        set: () => { }
    },
    /** [A000-BFFF] Cartridge (External) RAM: 
     *  There is a small amount of writeable memory available in the GameBoy;
     *  if a game is produced that requires more RAM than is available in the hardware,
     *  additional 8k chunks of RAM can be made addressable here. */
    {
        start: 0xA000,
        end: 0xBfff,
        set: () => { }
    },
    /** [C000-DFFF] Working RAM:
     *  The GameBoy's internal 8k of RAM, which can be read from or written to by the CPU. */
    {
        start: 0xc000,
        end: 0xdfff,
        set: () => { }
    },
    /** [E000-FDFF] Working RAM (shadow): 
     *  Due to the wiring of the GameBoy hardware,
     *  an exact copy of the working RAM is available 8k higher in the memory map.
     *  This copy is available up until the last 512 bytes of the map,
     *  where other areas are brought into access. */
    {
        start: 0xe000,
        end: 0xfdff,
        set: () => { }
    },
    /** [FE00-FE9F] Graphics:
     *  sprite information: Data about the sprites rendered by the graphics chip are held here,
     *  including the sprites' positions and attributes. */
    {
        start: 0xfe00,
        end: 0xfe9f,
        set: () => { }
    },
    /** [FF00-FF7F] Memory-mapped I/O:
     *  Each of the GameBoy's subsystems (graphics, sound, etc.) has control values,
     *  to allow programs to create effects and use the hardware.
     *  These values are available to the CPU directly on the address bus, in this area. */
    {
        start: 0xff00,
        end: 0xff7f,
        set: () => { }
    },
    /** [FF80-FFFF] Zero-page RAM:
     *  A high-speed area of 128 bytes of RAM is available at the top of memory.
     *  Oddly, though this is "page" 255 of the memory, it is referred to as page zero,
     *  since most of the interaction between the program and the GameBoy hardware occurs through use of this page of memory. */
    {
        start: 0xff80,
        end: 0xffff,
        set: () => { }
    },
];

export default MemorySegmentDefinitions;